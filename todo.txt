1: single quotes are literal - FIXED!!
2: env check is supposedly too eager - FIXED!!
3: '|' - WORKING!!
3.1: ';' - WORKING!!
4: '\' escape characters <---- FIXED!
5: multifile redirections <-- WORKING!!
6: recursive string join <- FIXED!!
7: ;; input <-- FIXED!!
7: \$ must be able to escape env variable from being checked <-- FIXED!!
8: throw error on trailing | <-- FIXED!!
9: empty env var (check for segs) <-- CHECKED, none :) but thats with $? still set
10: Exit status <-- DONE!!
11:	no exit on non fatal errors <-- Unclosed quote and trailing pipes implemented, anything else?
12: set $? in signals aswel (128+signal_int) <-- DONE!!
13: input ` ""` causes seg fault <--- this is fixed
14: new is leaked during put_error_data exit in split_init <-- Fixed

------

and a bunch of other shit i do not know at the time being.
check file descriptor leaks at some point :)
and normal leaks

▾ put_error <-- DONE!!
return 1 is chillin just reset to prompt
return 2 is a fatal error
  ▸ fork_next_and_pipe -- DONE
  	has data
  ▸ close_the_shit -- DONE
  	can return an int to cmd_dispatch, put_error_data from there
  ▸ dup_redir -- DONE
  	same as above
  ▸ env_set_val -- DONE
  	called by ft_export and set_exit_env_val, which are always called by functiosn with data, i.e. return an int
  ▸ get_env_path_exec -- DONE
  	called by ft_exec, but currently returns a char *, rewrite to put the string in a passed char **, and return an int
  ▸ griffin_try -- DONE
	return int to ft_exec, through to cmd_dispatch
  ▸ get_path -- DONE
	return int to ft_exec, through to cmd_dispatch
  • main -- DONE
  	no worries fam
  ▸ handle_escape_quotes -- DONE
  	return NULL, put_error_data from parse_arg -- DONE
  ▸ parse_arg -- DONE
  	can put_error_data from here -- DONE
  ▸ parse_args -- DONE
	same as above -- DONE
  ▸ str_env_replace_index -- DONE
	return null through stack to parse_arg, put_error_data from there
  ▸ parse_init -- DONE
  	can put_error_data from here -- DONE
  ▸ save_in_flag -- DONE
  ▸ redir_append -- DONE
  ▸ redir_trunc -- DONE
  ▸ redir_std_input -- DONE
  ▸ open_pipe -- DONE
  ▸ ft_add_pid -- DONE

Check every alloc/dup has a protection check
	Check we aren't accessing structs where theyve been freed
		i.e.
		Function calles another function as data->something = function(), function errors and clears data, causing freed access on retunr
		Struct is allocated, and then before protection check, struct->potato values are set

kanker kommands
	empty command, exit		fixed
		leaks
	pwd||yeet				fixed
		null read, should throw syntax error
	echo <invalidfile		fixed
		leaks
	echo "a"""'b'c;echo d	fixed
		weird parse
	 ''''a					fixed
		Error:
	echo >>>test			fixed
		not sure what, parse error
			check filename isnt a reserved char
	echo \"""				fixed
		same error as before, "" parses badly
	echo ><					fixed
		filename not reserved char
	" echo hello"			fixed
		space before command causes potato
	echo >|					fixed

syntax errors with pipes or other may leave file descriptors open due to unclean exit
	file descriptors get opened when syntax error gets trhown which shoudln'tr eally happen but annoying to avoid

cat < naaah				fixed
	errors but runs cat still

echo test "" test		fixed
	output:test  test
	shoudl save "" as empty arg

export += stuff 		done but not norm

echo $invalid env var	fixed
	causes heap buffer overflow thingy

$? -> FIXED

ESCAPE CHARACTERS ARE BROKEN AGAIN		fixed

cat > potato < naah (a non existent file)		fixed
followed by: echo hi
	causes leaks

REMOVE PRINT_VARS.c									fixed

export POTA="la     -l      - a"; echo $POTA		fixed
	env doesnt show becuase we already substitute env vars while parsing

	potential fixes
		split each string arg into a linked list struct of strings including an enum for what type literal/singlequote/doublequote
		and then do env substitution and concatanation directly before running the cmd

		pause parse_args everytime you hit a semicolon
		run the cmd, and then continue parsing
			just put a bool flag "hasinput" in data
			assign the remainder of the string to a char *
			and check before taking input from gnl

export ""="" ;				fixed
 	heap buffer overflow

echo "$"					fixed
	doesnt show naything

check everywhere where strdup/strjoin/malloc/calloc happens and make sure there are reasonable null checks

'
echo HOI					fixed
	siggy seg fault, cause by bad reset from unclosed quotes

1:`' `						fixed
2:`ls`

1:echo '					fixed
2:anything

exit [n]					fixed
	our exit, it too simple

	our exit status's are different than would be expected, bash has 1 for error, 2 for misuse (of simple commands)
		we have 1 for misuse, 2 for fatal error currently as I think, but I dont think its consistent (havn't tested)

echo $TEST$TEST$TEST			fixed
echo $TEST$TEST=lol$TEST""lol
	heap overflow

>>: echo $USER$TEST$TEST		fixed
dries$TEST

mkdir test_dir ; cd test_dir ; rm -rf ../test_dir ; cd . ; pwd ; cd . ; pwd ; cd .. ; pwd	fixed

cd potato potato
	mini:	cd: potato: No such file or directory
	bash:	bash: cd: too many arguments

cd $NOTHING $NOTHING potato
	mini:	cd  :No such file or directory
	bash:	bash: cd: potaot: No such file or directory

		this one is caused by $NOTHING being read as an empty arg







	how to ruin someones day, minishell edition

mkdir test; cd test; rm -rf ../test; pwd; cd ..
export =
export +=
export hello=hi hello+=wow
$TEST$TEST$TEST$TEST
export $HULLO=there; echo $HULLO
export potato=tomato orange=doorhinge; echo -n -n -n $potato$orange; unset orange potato; echo $potato$orange
